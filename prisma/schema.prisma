generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id               String             @id @default(auto()) @map("_id") @db.ObjectId
  email            String             @unique
  password         String
  role             String             @default("user") // Add this line
  createdAt        DateTime           @default(now())
  coffees          Coffee[]
  subscriptions    Subscription[]
  payments         Payment[]
  SubscriptionUser SubscriptionUser[]
}

model Coffee {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  image       String
  title       String
  description String
  price       Float
  createdAt   DateTime @default(now())
  userId      String   @db.ObjectId
  user        User     @relation(fields: [userId], references: [id])
}

model Subscription {
  id               String             @id @default(auto()) @map("_id") @db.ObjectId
  name             String
  price            Float
  createdAt        DateTime           @default(now())
  userId           String?            @db.ObjectId
  user             User?              @relation(fields: [userId], references: [id])
  payments         Payment[]
  SubscriptionUser SubscriptionUser[]
}

enum PaymentStatus {
  PENDING
  CANCELLED
  DELIVERED
  PAID
}

model Payment {
  id             String        @id @default(auto()) @map("_id") @db.ObjectId
  email          String
  firstName      String?
  lastName       String?
  address        String
  apartment      String?
  city           String
  zipCode        String
  phone          String?
  textOffers     Boolean       @default(false)
  planName       String
  planPrice      Float
  paymentDate    DateTime      @default(now())
  userId         String?       @db.ObjectId
  user           User?         @relation(fields: [userId], references: [id])
  subscriptionId String?       @db.ObjectId
  subscription   Subscription? @relation(fields: [subscriptionId], references: [id])
  paymentMethod  String?
  coffeeType   String?
  roastPreference String?
  status         PaymentStatus @default(PENDING)
}

model Message {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  email       String
  description String
  createdAt   DateTime @default(now())
}

model SubscriptionUser {
  id             String             @id @default(auto()) @map("_id") @db.ObjectId
  status         SubscriptionStatus @default(ACTIVE)
  startDate      DateTime           @default(now())
  endDate        DateTime
  type           String
  address        String
  apartment      String?
  city           String
  zipCode        String
  phone          String?
  email          String?             // Added email field
  userId         String             @db.ObjectId
  user           User               @relation(fields: [userId], references: [id])
  subscriptionId String             @db.ObjectId
  subscription   Subscription       @relation(fields: [subscriptionId], references: [id])
}

enum SubscriptionStatus {
  ACTIVE
  EXPIRED
  PENDING
}
